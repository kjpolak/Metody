#lang racket

;;; rozdział 3.1.1

(define balance 100)

(define (withdraw amount)
  (if (>= balance amount)
      (begin (set! balance (- balance amount))
             balance)
      "Insufficient funds"))

;: (withdraw 25)
;: (withdraw 25)
;: (withdraw 60)
;: (withdraw 15)

(define new-withdraw
  (let ((balance 100))
    (lambda (amount)
      (if (>= balance amount)
          (begin (set! balance (- balance amount))
                 balance)
          "Insufficient funds"))))


(define (make-withdraw balance)
  (lambda (amount)
    (if (>= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        "Insufficient funds")))


;: (define W1 (make-withdraw 100))
;: (define W2 (make-withdraw 100))
;: (W1 50)
;: (W2 70)
;: (W2 40)
;: (W1 40)
;;zadanie 1
(define (make-account balance password)
  (define (withdraw amount)
    (if (>= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        "Insufficient funds"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (define (dispatch pin m)
    (if (eq? pin password)
    (cond ((eq? m 'withdraw) withdraw)
          ((eq? m 'deposit) deposit)
          (else (error "Unknown request -- MAKE-ACCOUNT"
                       m)))
    (lambda (m) 'incorect-password)))
  dispatch)

;: (define acc (make-account 100))

;: ((acc 'withdraw) 50)
;: ((acc 'withdraw) 60)
;: ((acc 'deposit) 40)
;: ((acc 'withdraw) 60)

;;; rozdział 3.1.3

(define (make-simplified-withdraw balance)
  (lambda (amount)
    (set! balance (- balance amount))
    balance))


;: (define W (make-simplified-withdraw 25))
;: (W 20)
;: (W 10)


(define (make-decrementer balance)
  (lambda (amount)
    (- balance amount)))

;: (define D (make-decrementer 25))
;: (D 20)
;: (D 10)

;: ((make-decrementer 25) 20)
;: ((lambda (amount) (- 25 amount)) 20)
;: (- 25 20)

;: ((make-simplified-withdraw 25) 20)

;: ((lambda (amount) (set! balance (- 25 amount)) 25) 20)
;: (set! balance (- 25 20)) 25

;;; Toższamość obiektów

;: (define D1 (make-decrementer 25))
;: (define D2 (make-decrementer 25))
;: 
;: (define W1 (make-simplified-withdraw 25))
;: (define W2 (make-simplified-withdraw 25))
;: 
;: (W1 20)
;: (W1 20)
;: (W2 20)

;: (define peter-acc (make-account 100))
;: (define paul-acc (make-account 100))
;: 
;: (define peter-acc (make-account 100))
;: (define paul-acc peter-acc)

;;; Kłopoty z programowaniem imperatywnym

(define (factorial n)
  (define (iter product counter)
    (if (> counter n)
        product
        (iter (* counter product)
              (+ counter 1))))
  (iter 1 1))

(define (factorial1 n)
  (let ((product 1)
        (counter 1))
    (define (iter)
      (if (> counter n)
          product
          (begin (set! product (* counter product))
                 (set! counter (+ counter 1))
                 (iter))))
    (iter)))
;;;;;;;;;;;;;;

(define (cons x y)
  (define (set-x! v) (set! x v))
  (define (set-y! v) (set! y v))
  (define (dispatch m)
    (cond ((eq? m 'car) x)
          ((eq? m 'cdr) y)
          ((eq? m 'set-car!) set-x!)
          ((eq? m 'set-cdr!) set-y!)
          (else (error "Undefined operation -- CONS" m))))
  dispatch)

(define (car z) (z 'car))
(define (cdr z) (z 'cdr))

(define (set-car! z new-value)
  ((z 'set-car!) new-value)
  z)

(define (set-cdr! z new-value)
  ((z 'set-cdr!) new-value)
  z)

;;;zadanie 2

(define (make-cycle l)
  (define (helper first l)
    (if (null? (mcdr l))
        (begin (set-mcdr! l first)
               l)
        (mcons (mcar l)
               (helper first (mcdr l)))))
  (if (null? l)
      (error l)
      (helper l l)))
;(make-cycle (mcons 1 (mcons 2 (mcons 3 (mcons 4 null)))))

;;zadanie 3
(define (make-cycle2 l)
  (define (helper xs)
    (if (null? (mcdr xs))
        (set-mcdr! xs l)
        (helper(mcdr xs))))
  (if (null? l)
      (error l)
      (helper l)))

(define (has-cycle? l)
  (define (helper v1 v2)
    (if (and
         (mpair? v1)
         (and (mpair? v2) (mpair? v2)))
        (let ((w1 (mcdr v1))
              (w2 (mcdr (mcdr v2))))
          (if (eq? w1 w2)
              #t
              (helper w1 w2)))
        #f))
  (helper l l))
;(has-cycle? (make-cycle (mcons 1 (mcons 2 (mcons 3 (mcons 4 null))))))
;(has-cycle? (mcons 5 (mcons 6 (make-cycle (mcons 1 (mcons 2 (mcons 3 (mcons 4 null))))))))

;;zadanie 4


(define (make-monitored proc)
  (let ((counter 0))
    (define (use-proc . xs)
      (set! counter (+ counter 1))
      (apply proc xs))
  (define (what-do m)
    (cond [(eq? m 'how-many?) counter]
          [(eq? m 'reset) (set! counter 0)]
          [else (error "Unknown request -- MAKE-MONITORED"
                       m)]))
  (cons use-proc what-do)))
#|
(define (make-monitored f)
  (let ((counter 0))
    (define (use-f . xs)
      (set! counter (+ counter 1))
      (apply f xs))
    (define (dispatch m)
      (cond [(eq? m 'how-many?) counter]
            [(eq? m 'reset) (set! counter 0)]
            [else (error "...")]))
    (cons use-f dispatch)))|#

(define p (make-monitored +))

;((car p) 1 2)
;((car p) 2 3)
;((car p) 3 4)

;((cdr p) 'how-many?)

;;;;zadanie 5
#|
(define (bucket-sort xs)
  (define (max xs elem)
    (if (null? xs)
        elem
        (max (cdr xs) (if (> (caar xs) elem) (caar xs) elem))))
  (define (the-walking-pair xs)
    (when (not (null? xs))
        (vector-set! v (caar xs) (cons (cdar xs) (vector-ref v (caar xs))))
      (begin (the-walking-pair (cdr xs)))))
  (define (procedure2 id acc)
    (if (> 0 id)
        acc
        (let ((elem (vector-ref v id)))
          (procedure2 (+ 1 id) (procedure3 elem acc id)))))
  (define (procedure3 xs acc id)
    (if (null? xs)
        acc
        (procedure3 (cdr xs) (cons (cons id (car xs)) acc) id)))
  (let ((v (make-vector (+ 1 (max-elem xs 0)) '())))
    (the-walking-pair xs)
    (procedure2 ?? ??)))|#
;;;;;;;;;;;;;;;;;;


(define (front-ptr queue) (mcar queue))
(define (rear-ptr queue) (mcdr queue))
(define (set-front-ptr! queue item) (set-mcar! queue item))
(define (set-rear-ptr! queue item) (set-mcdr! queue item))

(define (empty-queue? queue) (null? (front-ptr queue)))
(define (make-queue) (mcons '() '()))

(define (front-queue queue)
  (if (empty-queue? queue)
      (error "FRONT called with an empty queue" queue)
      (mcar (front-ptr queue))))

(define (insert-queue! queue item)
  (let ((new-pair (mcons item '())))
    (cond ((empty-queue? queue)
           (set-front-ptr! queue new-pair)
           (set-rear-ptr! queue new-pair)
           queue)
          (else
           (set-mcdr! (rear-ptr queue) new-pair)
           (set-rear-ptr! queue new-pair)
           queue))))

(define (delete-queue! queue)
  (cond ((empty-queue? queue)
         (error "DELETE! called with an empty queue" queue))
        (else
         (set-front-ptr! queue (mcdr (front-ptr queue)))
         queue)))
;;;;;;;;;;;;;;;;;;;
(define (histogram-list l)
  (foldl (lambda (n l) (list-update l n (lambda (k) (+ k 1))))
         (build-list (+ (apply max l) 1)
                     (lambda (k) 0))
         l))

(define (histogram-vec l)
  (define v (make-vector (+ (apply max l) 1) 0))
  (for-each (lambda (n) (vector-set! v n (+ 1(vector-ref v n)))) l)
  (vector->list v))

;; test
;(define h1 (histogram-list (build-list 10000 identity)))
;(define h2 (histogram-vec (build-list 10000 identity)))
;;;;;;;;;;;;;;;;;;;

(define (lcons x f)
  (cons x f))

(define (lhead l)
  (car l))

(define (ltail l)
  ((cdr l)))

(define (ltake n l)
  (if (or (null? l) (= n 0))
      null
      (cons (lhead l)
            (ltake (- n 1) (ltail l)))))

(define (lfilter p l)
  (cond [(null? l) null]
        [(p (lhead l))
         (lcons (lhead l)
                (lambda ()
                  (lfilter p (ltail l))))]
        [else (lfilter p (ltail l))]))

(define (lmap f . ls)
  (if (ormap null? ls) null
      (lcons (apply f (map lhead ls))
             (lambda ()
               (apply lmap (cons f (map ltail ls)))))))

;; ciąg Fibonacciego

(define fib
  (lcons 0
         (lambda ()
           (lcons 1
                  (lambda ()
                    (lmap + fib (ltail fib)))))))
           
;; spamiętywanie

(define (memo-proc proc) 
  (let ((already-run? false) (result false))
    (lambda ()
      (if (not already-run?)
          (begin (set! result (proc))
                 (set! already-run? true)
                 result)
          result))))

;(define (lcons x f)
;  (cons x (memo-proc f)))

;; alternatywna implementacja wykorzystująca listy modyfikowalne

;(define (lcons x f)
;  (mcons x f))

;(define (lhead l)
;  (mcar l))

;(define (ltail l)
;  (when (procedure? (mcdr l))
;      (set-mcdr! l ((mcdr l))))
;  (mcdr l))

;; dodatkowy przykład: liczby pierwsze

(define (integers-starting-from n)
  (lcons n (lambda () (integers-starting-from (+ n 1)))))

(define naturals (integers-starting-from 0))

(define (divisible? x y) (= (remainder x y) 0))
(define no-sevens
  (lfilter (lambda (x) (not (divisible? x 7)))
           naturals))

(define (sieve stream)
  (lcons
   (lhead stream)
   (lambda ()
     (sieve (lfilter
             (lambda (x)
               (not (divisible? x (lhead stream))))
             (ltail stream))))))

(define primes (sieve (integers-starting-from 2)))
;;zadanie 6
(define fact
  (lcons 1
         (lambda ()
           (lmap * (integers-starting-from 1) fact))))

;;zadanie 7
(define (sum xs) 
  (lcons (lhead xs)
         (lambda ()
           (lmap + (integers-starting-from 1) (ltail xs)))))





;; test
(define h1 (histogram-list (build-list 10000 identity)))
(define h2 (histogram-vec (build-list 10000 identity)))
